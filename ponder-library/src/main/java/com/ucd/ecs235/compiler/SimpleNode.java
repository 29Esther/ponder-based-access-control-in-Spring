package com.ucd.ecs235.compiler;

import com.ucd.ecs235.dto.ActionFilter;
import com.ucd.ecs235.dto.AuthPolicy;
import com.ucd.ecs235.dto.RefrainPolicy;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 7.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected Ponder parser;

  protected static int apIdx = -1;
  protected static int afIdx = -1;
  protected static int rpIdx = -1;
  protected static int currType = 0; //0-AuthPolicy; 1-ActionPolicy; 2-RefrainPolicy
  protected static boolean inCondition = false;

  protected static ArrayList<AuthPolicy> apList = new ArrayList<>();
  protected static ArrayList<ActionFilter> afList = new ArrayList<>();
  protected static ArrayList<RefrainPolicy> rpList = new ArrayList<>();

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(Ponder p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() {
    return PonderTreeConstants.jjtNodeName[id];
  }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    //System.out.println(toString(prefix));
    if(toString().equals("AuthPlus")){
      apList.get(apIdx).setAuthPlus(true);
    }
    if(toString().equals("AuthMinus")){
      apList.get(apIdx).setAuthPlus(false);
    }
    if(toString().contains("PolicyName:")) {
      encounterPolicyName();
    }
    if(toString().equals("AuthPolicy")){
      currType = 0;
      apList.add(new AuthPolicy());
      apIdx++;
    }
    if(toString().equals("RefrainPolicy")){
      currType = 2;
      rpList.add(new RefrainPolicy());
      rpIdx++;
    }
    if(toString().equals("ActionFilter")){
      encouterActionFilter();
    }
    if(toString().equals("Subject")){
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          if(n.toString().contains("Domain:")){
            encouterSubjectDomain(n.toString().split(":")[1].trim());
          }else if(n.toString().contains("Type:")){
            encouterSubjectType(n.toString().split(":")[1].trim());
          }
        }
      }
    }
    if(toString().equals("Target")){
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          if(n.toString().contains("Domain:")){
            encouterTargetDomain(n.toString().split(":")[1].trim());
          }else if(n.toString().contains("Type:")){
            encouterTargetType(n.toString().split(":")[1].trim());
          }
        }
      }
    }
    if(toString().equals("ActionList")){
      ArrayList<String> actionList = new ArrayList<>();
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          if(n.toString().contains("Action:")){
            String action = n.toString().split(":")[1].trim();
            actionList.add(action);
          }
        }
      }
      encounterActionList(actionList);
    }
    if(toString().contains("ActionName:")){
      encounterActionName();
    }
    if(toString().equals("ActionCondition")){
      if(children!=null&&children.length==1){
        encounterActionCondition(children[0].toString());
      }
    }
    if(toString().equals("ActionIn")){
      if (children != null) {
        HashMap<String, String> in = new HashMap<>();
        for (int i = 0; i < children.length; i+=2) {
          String name = children[i].toString();
          String value = children[i+1].toString();
          if(name.contains("ParameterName:")){
            name = name.split(":")[1].trim();
          }
          if(value.contains("ParameterValue:")){
            value = value.split(":")[1].trim();
          }
          in.put(name, value);
        }
        if(inCondition){
          afList.get(afIdx).setIn(in);
          inCondition = false;
        }else {
          afList.get(afIdx).setDefaultIn(in);
        }
      }
    }
    if(toString().equals("ActionOut")) {
      if (children != null) {
        HashMap<String, String> out = new HashMap<>();
        for (int i = 0; i < children.length; i += 2) {
          String name = children[i].toString();
          String value = children[i + 1].toString();
          if (name.contains("ParameterName:")) {
            name = name.split(":")[1].trim();
          }
          if (value.contains("ParameterValue:")) {
            value = value.split(":")[1].trim();
          }
          out.put(name, value);
          afList.get(afIdx).setIn(out);
        }
      }
    }
    if(toString().equals("ActionResult")) {
      if (children != null && children.length==1) {
        if(children[0].toString().contains("ParameterValue:")){
          afList.get(afIdx).setResult(children[0].toString().split(":")[1]);
        }
      }
    }
    if(toString().contains("Action:")){
      if(currType==2){
        rpList.get(rpIdx).setAction(toString().split(":")[1]);
      }
    }
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  private void encounterPolicyName(){
      switch (currType){
        case 0:
          apList.get(apIdx).setPolicyName(toString().split(":")[1].trim());
          break;
        case 2:
          rpList.get(rpIdx).setPolicyName(toString().split(":")[1].trim());
          break;
      }
  }

  private void encouterActionFilter(){
    currType = 1;
    AuthPolicy ap = apList.get(apIdx);
    ActionFilter af = new ActionFilter();
    af.setFilterName(ap.getPolicyName());
    af.setSubjectDomain(ap.getSubjectDomain());
    af.setSubjectType(ap.getSubjectType());
    af.setTargetType(ap.getTargetType());
    af.setTargetDomain(ap.getTargetDomain());
    apList.remove(apIdx);
    apIdx--;
    afList.add(af);
    afIdx++;
  }

  private void encouterSubjectDomain(String domain){
    switch (currType){
      case 0:
        apList.get(apIdx).setSubjectDomain(domain);
        break;
      case 1:
        afList.get(afIdx).setSubjectDomain(domain);
      case 2:
        rpList.get(rpIdx).setSubjectDomain(domain);
    }
  }

  private void encouterSubjectType(String type){
    switch (currType){
      case 0:
        apList.get(apIdx).setSubjectType(type);
        break;
      case 1:
        afList.get(afIdx).setSubjectType(type);
      case 2:
        rpList.get(rpIdx).setSubjectType(type);
    }
  }

  private void encouterTargetDomain(String domain){
    switch (currType){
      case 0:
        apList.get(apIdx).setTargetDomain(domain);
        break;
      case 1:
        afList.get(afIdx).setTargetDomain(domain);
      case 2:
        rpList.get(rpIdx).setTargetDomain(domain);
    }
  }

  private void encouterTargetType(String type){
    switch (currType){
      case 0:
        apList.get(apIdx).setTargetType(type);
        break;
      case 1:
        afList.get(afIdx).setTargetType(type);
      case 2:
        rpList.get(rpIdx).setTargetType(type);
    }
  }

  private void encounterActionList(List<String> actionList){
    switch (currType){
      case 0:
        apList.get(apIdx).setAction(actionList);
    }
  }

  private void encounterActionName(){
    if(currType==1){
      afList.get(afIdx).setActionName(toString().split(":")[1].trim());
    }
  }

  private void encounterActionCondition(String action){
    if(currType==1){
      inCondition = true;
      if(action.contains("Action:")) {
        afList.get(afIdx).setCondition(action.split(":")[1].trim());
      }
    }
  }

  public int getId() {
    return id;
  }
}

/* JavaCC - OriginalChecksum=341529fad6f5020e8a009c356484c610 (do not edit this line) */
