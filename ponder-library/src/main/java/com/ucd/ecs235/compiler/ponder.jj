/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ponder.jj */
/*@egen*/options {
             
  KEEP_LINE_COLUMN = false;
}

PARSER_BEGIN(Ponder)

/**
 * An Arithmetic Grammar.
 */
import java.io.*;
public class Ponder/*@bgen(jjtree)*/implements PonderTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTPonderState jjtree = new JJTPonderState();

/*@egen*/

  /** Main entry point. */
  public static void main(String args[]) throws FileNotFoundException, UnsupportedEncodingException{
    System.out.println("Reading from config file...");
          Reader reader = new InputStreamReader(new FileInputStream("policies.txt"), "UTF-8");
    //    Ponder t = new Ponder(System.in);
          Ponder t = new Ponder(reader);
    try {
      SimpleNode n = t.Start();
      n.dump("");
//      ArrayList<ActionFilter> actionFilters = SimpleNode.afList;
//      ArrayList<AuthPolicy> authPolicies = SimpleNode.apList;
//      ArrayList<RefrainPolicy> refrainPolicies = SimpleNode.rpList;
//      System.out.println("AuthPolicy: "+authPolicies.size()+"; Action Filter: "+actionFilters.size() + "; Refrain Policy: "+refrainPolicies.size());
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      //e.printStackTrace();
    }
  }
}

PARSER_END(Ponder)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}

TOKEN :
{
  < INSTANCE: "inst">
| < AUTHPlUS: "auth+">
| < AUTHMINUS: "auth-">
| < SUBJECT: "subject">
| < TARGET: "target">
| < ACTION: "action">
| < WHEN: "when">
| < LCURLYBRACE: "{" >
| < RCURLYBRACE: "}" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < ELSE: "else" >
| < FOR: "for" >
| < IF: "if" >
| < IN: "in">
| < OUT: "out">
| <RESULT: "result">
| <REFRAIN: "refrain">
| < TYPE: "<"(<STRING>)+">">
| < DOMAIN: ("/"(<STRING>)*("/" <STRING>)*)(("+"|"-")"/"(<STRING>)*("/" <STRING>)*)*>
| < ACTIONITEM: ((<STRING>)+("."(<STRING>)+)*"()")>
| < STRING: (["_"]|["a"-"z"]|["A"-"Z"])((["0"-"9"])*|(["a"-"z"])*|(["A"-"Z"])*)+>
| < PARAMETER: (["0"-"9"])+|"\""((["a"-"z"])*|(["A"-"Z"])*|(["0"-"9"])*)+"\"">
}

/** Main production. */
SimpleNode Start() : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  (PolicyStatement())*
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/** auth policy */

void PolicyName():
{/*@bgen(jjtree) PolicyName */
    ASTPolicyName jjtn000 = new ASTPolicyName(JJTPOLICYNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) PolicyName */
    try {
/*@egen*/
    t = <STRING>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setName(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void DomainScopeExpression():
{/*@bgen(jjtree) DomainScopeExpression */
    ASTDomainScopeExpression jjtn000 = new ASTDomainScopeExpression(JJTDOMAINSCOPEEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) DomainScopeExpression */
   try {
/*@egen*/
   t = <DOMAIN>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
     jjtn000.setName(t.image);
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ActionItem():
{/*@bgen(jjtree) ActionItem */
    ASTActionItem jjtn000 = new ASTActionItem(JJTACTIONITEM);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) ActionItem */
  try {
/*@egen*/
  t = <ACTIONITEM>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ActionList():
{/*@bgen(jjtree) ActionList */
  ASTActionList jjtn000 = new ASTActionList(JJTACTIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionList */
    try {
/*@egen*/
    (ActionItem())("," ActionItem() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ConstraintExpression():
{/*@bgen(jjtree) ConstraintExpression */
  ASTConstraintExpression jjtn000 = new ASTConstraintExpression(JJTCONSTRAINTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ConstraintExpression */
    try {
/*@egen*/
    <STRING>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Instance():
{/*@bgen(jjtree) Instance */
  ASTInstance jjtn000 = new ASTInstance(JJTINSTANCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Instance */
    try {
/*@egen*/
    <INSTANCE>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AuthPlus():
{/*@bgen(jjtree) AuthPlus */
  ASTAuthPlus jjtn000 = new ASTAuthPlus(JJTAUTHPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AuthPlus */
    try {
/*@egen*/
    <AUTHPlUS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AuthMinus():
{/*@bgen(jjtree) AuthMinus */
  ASTAuthMinus jjtn000 = new ASTAuthMinus(JJTAUTHMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AuthMinus */
    try {
/*@egen*/
    <AUTHMINUS>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Type():
{/*@bgen(jjtree) Type */
    ASTType jjtn000 = new ASTType(JJTTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) Type */
   try {
/*@egen*/
   t = <TYPE>/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/
   {
     jjtn000.setName(t.image);
   }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Subject():
{/*@bgen(jjtree) Subject */
  ASTSubject jjtn000 = new ASTSubject(JJTSUBJECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Subject */
    try {
/*@egen*/
    "subject" [Type()] DomainScopeExpression() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Target():{/*@bgen(jjtree) Target */
  ASTTarget jjtn000 = new ASTTarget(JJTTARGET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Target */
    try {
/*@egen*/
    "target" [Type()] DomainScopeExpression() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Action():{/*@bgen(jjtree) Action */
  ASTAction jjtn000 = new ASTAction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Action */
    try {
/*@egen*/
    "action" ActionList() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void When():{/*@bgen(jjtree) When */
  ASTWhen jjtn000 = new ASTWhen(JJTWHEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) When */
    try {
/*@egen*/
    "when" ConstraintExpression() ";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AuthPlusPolicyContent():
{/*@bgen(jjtree) AuthPlusPolicyContent */
  ASTAuthPlusPolicyContent jjtn000 = new ASTAuthPlusPolicyContent(JJTAUTHPLUSPOLICYCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AuthPlusPolicyContent */
    try {
/*@egen*/
    AuthPlus() PolicyName() "{"
        Subject()
        Target()
        "action" (ActionList()";"|
        ActionFilter())
    "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AuthMinusPolicyContent():
{/*@bgen(jjtree) AuthMinusPolicyContent */
  ASTAuthMinusPolicyContent jjtn000 = new ASTAuthMinusPolicyContent(JJTAUTHMINUSPOLICYCONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AuthMinusPolicyContent */
    try {
/*@egen*/
    AuthMinus() PolicyName() "{"
        Subject()
        Target()
        Action()
        [ When() ]
    "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AuthPolicy():
{/*@bgen(jjtree) AuthPolicy */
  ASTAuthPolicy jjtn000 = new ASTAuthPolicy(JJTAUTHPOLICY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AuthPolicy */
    try {
/*@egen*/
    AuthPlusPolicyContent()| AuthMinusPolicyContent()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ParameterName():
{/*@bgen(jjtree) ParameterName */
    ASTParameterName jjtn000 = new ASTParameterName(JJTPARAMETERNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) ParameterName */
    try {
/*@egen*/
    t = <STRING>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjThis.setName(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ParameterValue():
{/*@bgen(jjtree) ParameterValue */
    ASTParameterValue jjtn000 = new ASTParameterValue(JJTPARAMETERVALUE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) ParameterValue */
    try {
/*@egen*/
    t = <PARAMETER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjThis.setName(t.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ActionIn():
{/*@bgen(jjtree) ActionIn */
  ASTActionIn jjtn000 = new ASTActionIn(JJTACTIONIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionIn */
    try {
/*@egen*/
    (<IN> ParameterName() "=" ParameterValue()";")+/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ActionOut():
{/*@bgen(jjtree) ActionOut */
  ASTActionOut jjtn000 = new ASTActionOut(JJTACTIONOUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionOut */
   try {
/*@egen*/
   (<OUT> ParameterName() "="ParameterValue()";")+/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void ActionResult():
{/*@bgen(jjtree) ActionResult */
  ASTActionResult jjtn000 = new ASTActionResult(JJTACTIONRESULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionResult */
    try {
/*@egen*/
    <RESULT>"="ParameterValue()";"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ActionName():
{/*@bgen(jjtree) ActionName */
  ASTActionName jjtn000 = new ASTActionName(JJTACTIONNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionName */
    try {
/*@egen*/
    <STRING>"("<STRING>(","<STRING>)*")"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ActionCondition():
{/*@bgen(jjtree) ActionCondition */
  ASTActionCondition jjtn000 = new ASTActionCondition(JJTACTIONCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionCondition */
    try {
/*@egen*/
    <IF> "("ActionItem()")"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ActionFilter():
{/*@bgen(jjtree) ActionFilter */
  ASTActionFilter jjtn000 = new ASTActionFilter(JJTACTIONFILTER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ActionFilter */
    try {
/*@egen*/
    ActionName()
    "{" ActionIn() "}"
    [ActionCondition()"{"
        ActionIn()
        [ActionOut()]
        [ActionResult()]
    "}"]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Refrain():
{/*@bgen(jjtree) Refrain */
  ASTRefrain jjtn000 = new ASTRefrain(JJTREFRAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Refrain */
    try {
/*@egen*/
    <REFRAIN>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void RefrainPolicy():
{/*@bgen(jjtree) RefrainPolicy */
  ASTRefrainPolicy jjtn000 = new ASTRefrainPolicy(JJTREFRAINPOLICY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) RefrainPolicy */
    try {
/*@egen*/
    Refrain() PolicyName() "{"
    Subject()
    Target()
    <ACTION> ActionItem()";"
    "}"/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PolicyStatement():
{/*@bgen(jjtree) PolicyStatement */
  ASTPolicyStatement jjtn000 = new ASTPolicyStatement(JJTPOLICYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PolicyStatement */
    try {
/*@egen*/
    Instance() (RefrainPolicy()|AuthPolicy())/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}