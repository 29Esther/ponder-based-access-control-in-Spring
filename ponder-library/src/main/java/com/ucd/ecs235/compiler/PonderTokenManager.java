package com.ucd.ecs235.compiler;/* PonderTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. PonderTokenManager.java */
/**
 * An Arithmetic Grammar.
 */

import java.io.IOException;
import java.io.PrintStream;

/** Token Manager. */
@SuppressWarnings("unused")
public class PonderTokenManager implements PonderConstants {

  /** Debug output. */
  public static PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fc3f80L) != 0L)
         {
            jjmatchedKind = 28;
            return 60;
         }
         return -1;
      case 1:
         if ((active0 & 0x1cc3f00L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 1;
            }
            return 60;
         }
         if ((active0 & 0x300080L) != 0L)
            return 60;
         return -1;
      case 2:
         if ((active0 & 0x1843f80L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
            return 60;
         }
         if ((active0 & 0x480000L) != 0L)
            return 60;
         return -1;
      case 3:
         if ((active0 & 0x1801f00L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 3;
            return 60;
         }
         if ((active0 & 0x42080L) != 0L)
            return 60;
         return -1;
      case 4:
         if ((active0 & 0x1801c00L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 4;
            return 60;
         }
         return -1;
      case 5:
         if ((active0 & 0x1000400L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
            return 60;
         }
         if ((active0 & 0x801800L) != 0L)
            return 60;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 31);
      case 41:
         return jjStopAtPos(0, 32);
      case 44:
         return jjStopAtPos(0, 17);
      case 59:
         return jjStopAtPos(0, 16);
      case 61:
         return jjStopAtPos(0, 30);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1300L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x300080L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x1800000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 123:
         return jjStopAtPos(0, 14);
      case 125:
         return jjStopAtPos(0, 15);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000L);
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 60);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400700L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 114:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 60);
         return jjMoveStringLiteralDfa3_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x840080L);
      case 116:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 60);
         return jjMoveStringLiteralDfa3_0(active0, 0x1300L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 60);
         break;
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x300L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 60);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 116:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 7, 60);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 43:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(4, 8);
         break;
      case 45:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(4, 9);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 60);
         break;
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 60);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 60);
         break;
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 60);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 60;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 55;
                  else if (curChar == 46)
                     { jjCheckNAdd(51); }
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 8); }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     { jjCheckNAdd(27); }
                  }
                  else if (curChar == 47)
                     { jjAddStates(9, 10); }
                  else if (curChar == 34)
                     { jjCheckNAddStates(11, 14); }
                  else if (curChar == 60)
                     { jjCheckNAdd(1); }
                  if (curChar == 47)
                  {
                     if (kind > 26)
                        kind = 26;
                     { jjCheckNAddStates(15, 17); }
                  }
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(18, 22); }
                  break;
               case 5:
                  if (curChar == 62 && kind > 25)
                     kind = 25;
                  break;
               case 6:
                  if (curChar != 47)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 8:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(23, 28); }
                  break;
               case 11:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(29, 33); }
                  break;
               case 16:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 17:
                  if (curChar != 47)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(34, 36); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(37, 42); }
                  break;
               case 22:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(43, 47); }
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  { jjCheckNAdd(27); }
                  break;
               case 28:
                  if (curChar == 34)
                     { jjCheckNAddStates(11, 14); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(11, 14); }
                  break;
               case 32:
                  if (curChar == 34 && kind > 29)
                     kind = 29;
                  break;
               case 33:
                  if (curChar == 47)
                     { jjAddStates(9, 10); }
                  break;
               case 34:
                  if (curChar == 47)
                     { jjCheckNAddStates(48, 50); }
                  break;
               case 35:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(48, 50); }
                  break;
               case 36:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 37:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 38:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 40:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if (curChar == 42)
                     { jjAddStates(51, 52); }
                  break;
               case 42:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 41); }
                  break;
               case 43:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 41); }
                  break;
               case 44:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(3, 8); }
                  break;
               case 50:
                  if (curChar == 46)
                     { jjCheckNAdd(51); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(53, 58); }
                  break;
               case 55:
                  if (curChar == 41 && kind > 27)
                     kind = 27;
                  break;
               case 56:
                  if (curChar == 40)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 60:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 8); }
                  if ((0x7fffffeL & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     { jjCheckNAddStates(0, 2); }
                  }
                  if ((0x7fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 8); }
                  else if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(3, 8); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAddStates(59, 67); }
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(18, 22); }
                  break;
               case 3:
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(18, 22); }
                  break;
               case 4:
                  if ((0x7fffffeL & l) != 0L)
                     { jjCheckNAddStates(18, 22); }
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(23, 28); }
                  break;
               case 9:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(23, 28); }
                  break;
               case 10:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(23, 28); }
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(29, 33); }
                  break;
               case 14:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(29, 33); }
                  break;
               case 15:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(29, 33); }
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(37, 42); }
                  break;
               case 20:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(37, 42); }
                  break;
               case 21:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(37, 42); }
                  break;
               case 23:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(43, 47); }
                  break;
               case 25:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(43, 47); }
                  break;
               case 26:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  { jjCheckNAddStates(43, 47); }
                  break;
               case 29:
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(11, 14); }
                  break;
               case 30:
                  if ((0x7fffffeL & l) != 0L)
                     { jjCheckNAddStates(11, 14); }
                  break;
               case 35:
                  { jjAddStates(48, 50); }
                  break;
               case 40:
                  { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 42:
               case 43:
                  { jjCheckNAddTwoStates(43, 41); }
                  break;
               case 46:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 8); }
                  break;
               case 48:
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(3, 8); }
                  break;
               case 49:
                  if ((0x7fffffeL & l) != 0L)
                     { jjCheckNAddStates(3, 8); }
                  break;
               case 51:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     { jjCheckNAddStates(53, 58); }
                  break;
               case 53:
                  if ((0x7fffffe00000000L & l) != 0L)
                     { jjCheckNAddStates(53, 58); }
                  break;
               case 54:
                  if ((0x7fffffeL & l) != 0L)
                     { jjCheckNAddStates(53, 58); }
                  break;
               case 58:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 59:
                  if ((0x7fffffeL & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  { jjCheckNAddStates(0, 2); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 35:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(48, 50); }
                  break;
               case 40:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 42:
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjCheckNAddTwoStates(43, 41); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 60 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\151\156\163\164", 
"\141\165\164\150\53", "\141\165\164\150\55", "\163\165\142\152\145\143\164", 
"\164\141\162\147\145\164", "\141\143\164\151\157\156", "\167\150\145\156", "\173", "\175", "\73", "\54", 
"\145\154\163\145", "\146\157\162", "\151\146", "\151\156", "\157\165\164", 
"\162\145\163\165\154\164", "\162\145\146\162\141\151\156", null, null, null, null, null, "\75", "\50", 
"\51", };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   t = Token.newToken(jjmatchedKind, curTokenImage);

   return t;
}
static final int[] jjnextStates = {
   57, 58, 59, 46, 47, 48, 49, 50, 56, 34, 39, 29, 30, 31, 32, 7, 
   11, 16, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 16, 11, 13, 14, 
   15, 16, 16, 18, 22, 16, 18, 19, 20, 21, 22, 16, 22, 24, 25, 26, 
   35, 36, 38, 42, 44, 50, 51, 52, 53, 54, 56, 46, 47, 48, 49, 50, 
   56, 57, 58, 59, 
};

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public PonderTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public PonderTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 60; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1ffffff81L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[60];
    static private final int[] jjstateSet = new int[2 * 60];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
